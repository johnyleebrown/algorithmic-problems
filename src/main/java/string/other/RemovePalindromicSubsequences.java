package string.other;

/**
 * 1332
 *
 * ======
 *
 * Task.
 *
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence
 * from s.
 *
 * Return the minimum number of steps to make the given string empty.
 *
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without
 * changing its order.
 *
 * A string is called palindrome if is one that reads the same backward as well as forward.
 *
 * ======
 *
 * Source: Leetcode
 */
public class RemovePalindromicSubsequences
{
	/**
	 * We can delete all characters 'a' in the 1st operation, and then all characters 'b' in the 2nd operation. So
	 * return 2 in this case.
	 */
	class Solution
	{
		public int removePalindromeSub(String s)
		{
			return s.isEmpty() ? 0 : (s.equals(new StringBuilder(s).reverse().toString()) ? 1 : 2);
		}
	}
}